"""
Most of the code in this file is copied from gym==0.17.2
"""
import hashlib
import logging
import os
import struct
from typing import Optional
import numpy as np


def get_np_random(seed=None, return_seed=False):
    if seed is not None and not (isinstance(seed, int) and 0 <= seed):
        raise logging.error('Seed must be a non-negative integer or omitted, not {}'.format(seed))

    seed = create_seed(seed)

    rng = np.random.RandomState()
    rng.seed(_int_list_from_bigint(hash_seed(seed)))
    if return_seed:
        return rng, seed
    else:
        return rng


def hash_seed(seed=None, max_bytes=8):
    """Any given evaluation is likely to have many PRNG's active at
    once. (Most commonly, because the environment is running in
    multiple processes.) There's literature indicating that having
    linear correlations between seeds of multiple PRNG's can correlate
    the outputs:

    http://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/
    http://stackoverflow.com/questions/1554958/how-different-do-random-seeds-need-to-be
    http://dl.acm.org/citation.cfm?id=1276928

    Thus, for sanity we hash the seeds before using them. (This scheme
    is likely not crypto-strength, but it should be good enough to get
    rid of simple correlations.)

    Args:
        seed (Optional[int]): None seeds from an operating system specific randomness source.
        max_bytes: Maximum number of bytes to use in the hashed seed.
    """
    if seed is None:
        seed = create_seed(max_bytes=max_bytes)
    hash = hashlib.sha512(str(seed).encode('utf8')).digest()
    return _bigint_from_bytes(hash[:max_bytes])


def create_seed(a=None, max_bytes=8):
    """Create a strong random seed. Otherwise, Python 2 would seed using
    the system time, which might be non-robust especially in the
    presence of concurrency.

    Args:
        a (Optional[int, str]): None seeds from an operating system specific randomness source.
        max_bytes: Maximum number of bytes to use in the seed.
    """
    # Adapted from https://svn.python.org/projects/python/tags/r32/Lib/random.py
    if a is None:
        a = _bigint_from_bytes(os.urandom(max_bytes))
    elif isinstance(a, str):
        a = a.encode('utf8')
        a += hashlib.sha512(a).digest()
        a = _bigint_from_bytes(a[:max_bytes])
    elif isinstance(a, int):
        a = a % 2 ** (8 * max_bytes)
    else:
        raise logging.error('Invalid type for seed: {} ({})'.format(type(a), a))

    return a


def _bigint_from_bytes(bytes):
    sizeof_int = 4
    padding = sizeof_int - len(bytes) % sizeof_int
    bytes += b'\0' * padding
    int_count = int(len(bytes) / sizeof_int)
    unpacked = struct.unpack("{}I".format(int_count), bytes)
    accum = 0
    for i, val in enumerate(unpacked):
        accum += 2 ** (sizeof_int * 8 * i) * val
    return accum


def _int_list_from_bigint(bigint):
    # Special case 0
    if bigint < 0:
        raise logging.error('Seed must be non-negative, not {}'.format(bigint))
    elif bigint == 0:
        return [0]

    ints = []
    while bigint > 0:
        bigint, mod = divmod(bigint, 2 ** 32)
        ints.append(mod)
    return ints


class GlobalRandomEngine:
    """
    Global Random Engine serving as the super class of BaseManager, it can sync all seeds in all managers automatically
    Then all objects generated by XxxManager will be set a random seed by GlobalRandomEngine.randint()
    """
    global_random_seed = None
    MAX_RAND_INT = 30000

    def __init__(self):
        self._instance_seed = GlobalRandomEngine.global_random_seed
        self._np_random = get_np_random(self._instance_seed)

    @property
    def np_random(self):
        if self._instance_seed != GlobalRandomEngine.global_random_seed:
            # sync
            self._instance_seed = GlobalRandomEngine.global_random_seed
            self._np_random = get_np_random(self._instance_seed)
        return self._np_random

    @property
    def random_seed(self):
        return GlobalRandomEngine.global_random_seed

    def randint(self):
        return self.np_random.randint(0, self.MAX_RAND_INT)


def set_global_random_seed(random_seed: Optional[int]):
    """
    Update the random seed and random engine
    All subclasses of RandomEngine will hold the same random engine, after calling this function
    :param random_seed: int, random seed
    """
    cls = GlobalRandomEngine
    cls.global_random_seed = random_seed
    cls.global_np_random = get_np_random(random_seed)
